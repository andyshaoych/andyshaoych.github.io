[ { "title": "Visual representation of Terraform plan", "url": "/posts/visual-terraform/", "categories": "terraform, graph", "tags": "terraform, graph, Graphviz", "date": "2022-08-18 10:18:40 +1000", "snippet": "Introhttps://www.terraform.io/cli/commands/graphGenerate a visual representation of either a configuration or execution plan. The output is in the DOT format, which can be used by GraphViz to generate charts.about Graphvizhttps://graphviz.org/about/terraform graph commandThe terraform graph command is used to generate a visual representation of either a configuration or execution plan. The output is in the DOT format, which can be used by GraphViz to generate charts.export to SVG terraform graph to dot terraform graph | dot -Tsvg &gt; /tmp/graph01.svg $ head /tmp/graph01.svg &lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?&gt; &lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt; &lt;!-- Generated by graphviz version 5.0.0 (20220707.1540) --&gt; &lt;!-- Pages: 1 --&gt; &lt;svg width=\"3542pt\" height=\"692pt\" viewBox=\"0.00 0.00 3542.13 692.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt; &lt;g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 688)\"&gt; &lt;polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-688 3538.13,-688 3538.13,4 -4,4\"/&gt; ... $ tail /tmp/graph01.svg &lt;polygon fill=\"black\" stroke=\"black\" points=\"1489.08,-600.91 1478.93,-603.93 1488.75,-607.9 1489.08,-600.91\"/&gt; &lt;/g&gt; &lt;!-- [root] root&amp;#45;&amp;gt;[root] provider[&amp;quot;registry.terraform.io/hashicorp/random&amp;quot;] (close) --&gt; &lt;g id=\"edge75\" class=\"edge\"&gt; &lt;title&gt;[root] root&amp;#45;&amp;gt;[root] provider[&amp;quot;registry.terraform.io/hashicorp/random&amp;quot;] (close)&lt;/title&gt; &lt;path fill=\"none\" stroke=\"black\" d=\"M2820.99,-659.03C2898,-648.59 3059.72,-626.65 3172.27,-611.38\"/&gt; &lt;polygon fill=\"black\" stroke=\"black\" points=\"3172.88,-614.83 3182.32,-610.01 3171.94,-607.89 3172.88,-614.83\"/&gt; &lt;/g&gt; &lt;/g&gt; &lt;/svg&gt; view the svg graph Browser (Chrome/Safari, etc) file:///Users/andy.shao/Downloads/graph01.svg Boxy-svg " }, { "title": "Django Web Framework and REST API", "url": "/posts/django-web-api/", "categories": "django, Web-API", "tags": "django, web, REST, API", "date": "2022-08-07 20:18:40 +1000", "snippet": " Project Repo: https://github.com/andyshaoych/django-web-api-demo Django Python Web server Ref: https://youtu.be/EuBQU_miReM see the bottom for Django REST Framework - Build an API serverTOC setup the virtual env &amp; install Django start a Django project google a Django .gitignore file start web server (in bash for this time) urlpatterns list routes URLs to views create views - response with message create views - render the template mock data from dictionary Migrate &amp; createsuperuser (password) Define Movie data model (db.sqlite3) Add the new table Movie to Admin page Query data from the database Detail View/Template Create a movie Delete a movie Exception Handling of Delete Django REST Framework - Build an API from Scratchsetup the virtual env &amp; install Django Verify Python version % python --version zsh: command not found: python % python3 --version Python 3.9.12 % pwd /Users/andy.shao/andy_workplace/labs02/django create a virtual envpython3 -m venv .venv IMPORTANT) activate the venv % . .venv/bin/activate (.venv) andy.shao@AMAC02C83ZPMD6M django % install Django % pip install django ... % pip freeze asgiref==3.5.2 Django==4.0.6 sqlparse==0.4.2 % python --version Python 3.9.12 start a Django project (.venv) andy.shao@AMAC02C83ZPMD6M movies % pwd /Users/andy.shao/andy_workplace/labs02/django/movies % ../.venv/bin/django-admin startproject movies . % tree ## -a shows the hiden files . ├── manage.py └── movies ├── __init__.py ├── asgi.py ├── settings.py ├── urls.py └── wsgi.pygoogle a Django .gitignore file https://www.toptal.com/developers/gitignore/api/django download the .gitignore file to the parent movie folder (.venv) andy.shao@AMAC02C83ZPMD6M movies % ls -a . .gitignore movies .. manage.py start web server (in bash for this time) activate the venv virtual environment ## activate the venv $ pwd /Users/andy.shao/andy_workplace/labs02/django/movies $ ls ../.venv/bin/ Activate.ps1 activate.fish pip3 python3 activate django-admin pip3.9 python3.9 activate.csh pip python sqlformat $ . ../.venv/bin/activate (.venv) $ pwd /Users/andy.shao/andy_workplace/labs02/django/movies (.venv) $ ls db.sqlite3 manage.py movies (.venv) $ ls -a movies/ . .. __init__.py __pycache__ asgi.py settings.py urls.py wsgi.py Start a web server with python manage.py (.venv) $ python manage.py help Type 'manage.py help &lt;subcommand&gt;' for help on a specific subcommand. Available subcommands: [auth] changepassword createsuperuser [contenttypes] remove_stale_contenttypes [django] check compilemessages createcachetable dbshell diffsettings dumpdata flush inspectdb loaddata makemessages makemigrations migrate sendtestemail shell showmigrations sqlflush sqlmigrate sqlsequencereset squashmigrations startapp startproject test testserver [sessions] clearsessions [staticfiles] collectstatic findstatic runserver (.venv) $ python manage.py runserver Watching for file changes with StatReloader Performing system checks... System check identified no issues (0 silenced). You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions. Run 'python manage.py migrate' to apply them. July 30, 2022 - 01:50:05 Django version 4.0.6, using settings 'movies.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C. In case of Error _sqlite3 File \"/usr/local/lib/python3.7/sqlite3/dbapi2.py\", line 27, in &lt;module&gt; from _sqlite3 import * ModuleNotFoundError: No module named '_sqlite3' OR File \"/home/andys/.venv/lib/python3.9/site-packages/django/db/backends/sqlite3/_functions.py\", line 45, in register create_deterministic_function(\"django_date_extract\", 2, _sqlite_datetime_extract) django.db.utils.NotSupportedError: deterministic=True requires SQLite 3.8.3 or higher Solution: changing the database from sqlite3 to pysqlite3 pip3 install pysqlite3 pip3 install pysqlite3-binary vim ~/.venv/lib/python3.9/site-packages/django/db/backends/sqlite3/base.py # from sqlite3 import dbapi2 as Database # annotation from pysqlite3 import dbapi2 as Database # import pysqlite3 Restart django server and it works. urlpatterns list routes URLs to views urls.py from django.contrib import admin from django.urls import path from movies import views urlpatterns = [ path('admin/', admin.site.urls), path('', views.home), path('movies/', views.movies), ] create views - response with message new a file - views.py from django.http import HttpResponse def movies(request): return HttpResponse(\"Hello there!\") def home(request): return HttpResponse(\"home page!\") create views - render the template update movies in views.py from django.http import HttpResponse from django.shortcuts import render data = { 'movies': ['movie1', 'movie2'] } def movies(request): # return HttpResponse(\"Hello there!\") return render(request, 'movies/movies.html', data) def home(request): return HttpResponse(\"home page!\") create ./templates/movies/movies.html template update INSTALLED_APPS in settings.py # Application definition INSTALLED_APPS = [ 'movies', 'django.contrib.admin', mock data from dictionary expand data(movies) in views.py data = { 'movies': [ { 'id': 5, 'title': 'Jaws', 'year': 1998 }, { 'id': 6, 'title': 'Sharknado', 'year': 2001 }, { 'id': 7, 'title': 'The Meg', 'year': 2010 } ] } loop through movies data in ./templates/movies/movies.html template`` &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt; movies &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Movies&lt;/h1&gt; &lt;ul&gt; &lt;/ul&gt; &lt;body&gt; &lt;/html&gt; Migrate &amp; createsuperuser (password) (.venv) $ python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, sessions (.venv) $ python manage.py createsuperuser Username (leave blank to use 'andy.shao'): admin Email address: user@email.com Password: Password (again): This password is too common. Bypass password validation and create user anyway? [y/N]: yDefine Movie data model (db.sqlite3) Create a file - models.py from django.db import models class Movie(models.Model): title = models.CharField(max_lenth=200) year = models.IntegerField() makemigration of the Model in app movies (.venv) $ python manage.py makemigrations movies Migrations for 'movies': movies/migrations/0001_initial.py - Create model Movie Verify 0001_initial.py from django.db import migrations, models class Migration(migrations.Migration): initial = True dependencies = [ ] operations = [ migrations.CreateModel( name='Movie', fields=[ ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('title', models.CharField(max_length=200)), ('year', models.IntegerField()), ], ), ] Optional) sqlmigrate Movie in movies app sqlmigrate doesn’t actuall do anything but only:Prints the SQL statements for the named migration. (.venv) $ python manage.py sqlmigrate movies 0001 BEGIN; -- -- Create model Movie -- CREATE TABLE \"movies_movie\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"title\" varchar(200) NOT NULL, \"year\" integer NOT NULL); COMMIT; Apply the migration of moview appNote) movies in the app list You may also use: python manage.py migrate movies (.venv) $ python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, movies, sessions Running migrations: Applying movies.0001_initial... OK Add the new table Movie to Admin page create admin.py and register Movie to Admin page from django.contrib import admin from .models import Movie admin.site.register(Movie) restart server(.venv) $ python manage.py runserver ## listens on 127.0.0.1 loopback only(.venv) $ python manage.py runserver 0.0.0.0:8000 ## to listen on every interface on port 8000 Verify the table on Admin page Improve the description of the table object: Movie object (2)override a method inside the model class Movie(models.Model): title = models.CharField(max_length=200) year = models.IntegerField() def __str__(self): return f'{self.title} from {self.year}' Verify the table on Admin page Query data from the database Modify views.py ... from .models import Movie # new def movies(request): data = Movie.objects.all() # new # return HttpResponse(\"Hello there!\") # return render(request, 'movies/movies.html', data) return render(request, 'movies/movies.html', {'movies': data}) # new ... Detail View/Template new detail view in views.py ... def detail(request, id): data = Movie.objects.get(pk=id) return render(request, 'movies/detail.html', {'movie': data}) new URL o views.detail urls.py urlpatterns = [ ... path('movies/&lt;int:id&gt;', views.detail), ... detail.html template &lt;ul&gt; &lt;li&gt;, , &lt;/li&gt; &lt;/ul&gt; Anchor the link to detail.html in movies.html Create a movie new url to urls.py path('movies/add', views.add), Add a link to movies/add in movies.html &lt;a href='movies/add'&gt; Add movie &lt;/a&gt; new view add in views.py from django.http import HttpResponseRedirect ... def add(request): title = request.POST.get('title') year = request.POST.get('year') if title and year: movie = Movie(title=title, year=year) movie.save() return HttpResponseRedirect(\"/movies\") return render(request, 'movies/add.html') add.html template &lt;form action=\"/movies/add\" method=\"POST\"&gt; &lt;input type=\"text\" name=\"title\" id=\"title\" placeholder=\"Movie title\"&gt; &lt;input type=\"text\" name=\"year\" id=\"year\" placeholder=\"Movie year\"&gt; &lt;input type=\"submit\" value=\"Add\"&gt; &lt;/form&gt; Error if csrf_token not presents inspect the add POST payload Network / Payload excercise Delete a movie new url to urls.py path('movies/delete', views.delete), Add a link to movies/delete in detail.html &lt;a href='movies/delete'&gt; Delete movie &lt;/a&gt; new view delete in views.py def delete(request, id): movie = Movie.objects.get(pk=id) movie.delete() return HttpResponseRedirect(\"/movies\") excercise Note) When test01 clicked: Note) When Delete movie clicked: Exception Handling of Delete test with a non-existing ID ( 111 ) DEBUG on (default) DEBUG off in settings.py # DEBUG = True DEBUG = False # ALLOWED_HOSTS = [] ALLOWED_HOSTS = ['localhost'] Bad Request (400) Change localhost to 127.0.0.1 # DEBUG = True DEBUG = False # ALLOWED_HOSTS = [] ALLOWED_HOSTS = ['127.0.0.1'] Server Error (500) Django REST Framework - Build an API from Scratch Ref: https://youtu.be/i5JykvxUk_A Continued with the above movies project Install restframework (.venv) $ pip install djangorestframework update INSTALLED_APPS in settings.py # Application definition INSTALLED_APPS = [ 'rest_framework', 'movies_rest', 'django.contrib.admin', Serialize JSON Object to JSON format in serializers.py from rest_framework import serializers from .models import Drink class MovieSerializer(serializer.ModelSerializer): Class Meta: model = Movie fields = ['id', 'title', 'year'] new REST url in urls.py path('movies_rest/', views.movie_list), new view movie_list in views.py from django.http import JsonResponse from .serializers import MovieSerializer def movie_list(request): movies = Movie.objects.all() serializer = MovieSerializer(movies, many=True) return JsonResponse({\"movies\": serializer.data}, safe=False) verify the REST API server http://127.0.0.1:8000/movies_rest/" }, { "title": "Quick guide to hosting a free blog site on github.io", "url": "/posts/hosting-a-free-blog-site-on-Github/", "categories": "github_pages, jekyll", "tags": "jekyll, chirpy, theme, github_pages", "date": "2022-08-06 19:58:40 +1000", "snippet": "Facts This site is hosted on Github Pages with Jekyll Jekyll in Ruby: Static site generator (Chirpy Theme) Local workstation: MacOS Tools: Visual Code / git / Ruby Adding content (post) to the site: MarkdownCode and DocsWhile a concise version of steps are stated below, refer to the following resources for more information. 1) GitHub Pages doc (and Jekyll)https://docs.github.com/en/pages/quickstart 2) Chirpy Jekyll Theme codehttps://github.com/cotes2020/jekyll-theme-chirpy 3) Chirpy Starterhttps://github.com/cotes2020/chirpy-starter 4) Chirpy Dochttps://www.rubydoc.info/gems/jekyll-theme-chirpy/3.0.2 5) Reference (video) Meet Jekyll - The Static Site GeneratorTypes of GitHub Pages sites 3 types: user, organization, project user / organization Repo: &lt;username/organization&gt;.github.io Site URL: http(s)://&lt;username/organization&gt;.github.io(Unless you’re using a custom domain) project Repo: project_repo Site URL: http(s)://&lt;username/organization&gt;.github.io/project_repo(Unless you’re using a custom domain) public / private repo?public / private: GitHub Pro, GitHub Team, GitHub Enterprise public only: GitHub Free for User/OrganizationInstall Jekyll and Bundler Get the local environment ready with editor (e.g, Visual Code), git, and Ruby, etc. Install Jekyll with $ sudo gem install bundler jekyll $ sudo gem install bundler jekyll Password: Successfully installed bundler-2.3.19 Parsing documentation for bundler-2.3.19 Done installing documentation for bundler after 0 seconds Successfully installed jekyll-4.2.2 Parsing documentation for jekyll-4.2.2 Done installing documentation for jekyll after 0 seconds 2 gems installed Create new repo on github and test locally NotesNote) The easiest way to create a new repository is mentioned in both doc Chirpy Jekyll Theme code and Chirpy Starter, which all point to this link https://github.com/cotes2020/chirpy-starter/generate. We’ll follow the doc Chirpy Jekyll Theme code Note) Chirpy Jekyll Theme code Chirpy Starter: Note) Chirpy Starter Use this template: Creating a New Repo by click on Chirpy Starter(Make sure have github logged in first)Name the Repo as &lt;USERNAME&gt;.github.ioMake it as Public Verify the created code (with default main branch only) git clone the repo to your local git clone https://github.com/andyshaoych/&lt;USERNAME&gt;.github.io.git Update .gitignore with .DS_Store &amp; .vscode in case of MacOS Installing Dependencies by bundle $ cd andyshaoych.github.io/ $ bundle Fetching gem metadata from https://rubygems.org/........... Resolving dependencies... ... Using jekyll-theme-chirpy 5.2.1 Bundle complete! 6 Gemfile dependencies, 44 gems now installed. ... Running Local Server by bundle exec jekyll serve $ bundle exec jekyll serve Configuration file: /Users/andy.shao/andy_workplace/andyshaoych.github.io/_config.yml Theme Config file: /Library/Ruby/Gems/2.6.0/gems/jekyll-theme-chirpy-5.2.1/_config.yml Source: /Users/andy.shao/andy_workplace/andyshaoych.github.io Destination: /Users/andy.shao/andy_workplace/andyshaoych.github.io/_site Incremental build: disabled. Enable with --incremental Generating... done in 1.711 seconds. Auto-regeneration: enabled for '/Users/andy.shao/andy_workplace/andyshaoych.github.io' Server address: http://127.0.0.1:4000/ Server running... press ctrl-c to stop. Optional) Run with Docker: $ docker run -it --rm \\ --volume=\"$PWD:/srv/jekyll\" \\ -p 4000:4000 jekyll/jekyll \\ jekyll serve Verify the empty site working (we’ll come back to add content after deploying on GitHub Pages)Deploy on GitHub Pages Note) Follow the steps here strictly although you may refer to the following docs for information: Refer to Chirpy Doc (skill other sections until Deploy on GitHub Pages) Refer to Deploy on Other Platforms on the same page if interested in. Verifications Verify your GitHub Pages is with the default branch (main) as the Source Verify your site is shown as the following Verify /.github/workflows/pages-deploy.yml on.push.branches should be the repo’s default branch name (main). The file will be used by GitHub Actions to build site files. name: 'Automatic build' on: push: branches: - main IMPORTANT) Add platform x86_64-linux to lockfileOtherwise the GitHub Actions workflow will fail. $ bundle lock --add-platform x86_64-linux Fetching gem metadata from https://rubygems.org/......... Resolving dependencies... Writing lockfile to /Users/andy.shao/andy_workplace/andyshaoych.github.io/Gemfile.lock Gemfile.lock PLATFORMS universal-darwin-21 x86_64-linux Commit and push the code up to GitHub $ git add . $ git commit -m \"first update\" $ git push Make sure pages-deploy.yml workflow under GitHub Actions build successfully done. Our pages-deploy.yml workflow will displayed as your git commit message, which triggered via push and builtgh-pages branch: Verify gh-pages branch is created by the above workflow, to store the built site files. Similar to the local _site folder Select GitHub Pages source to gh-pages branch: Settings → Options → GitHub Pages → Save Verify workflow pages build and deployment build successfully done. Triggered via GitHub Pages (bot) and build github.io site. Verify the newly deployed site Note) This deployment is done by GitHub Pages workflow Add a new post to the site with Markdown Add a Markdown file to _posts with naming convention as YYYY-MM-DD-NAME-OF-POST.md, e.g,2022-08-06-hosting-a-free-blog-site-on-Github.md YAML frontmatterAdd frontmatter to the first line --- layout: post title: \"Quick guide to hosting a free blog site on Github\" date: 2022-08-06 19:58:40 +1000 categories: github_pages jekyll tags: jekyll chirpy theme github_pages --- Populate image files to Asset and update the image links, e.g.: ![](/assets/images/hosting-a-free-blog-site-on-Github/2022-08-07-21-37-39.png) Verify at localCustomize the site via _config.yml Update the variables of _config.yml avatar: /assets/images/avatar.png timezone: Australia/Sydney title: DevOps # the main title tagline: Andy Shao's Tech Notes # it will display as the sub-title github: username: andyshaoych # change to your github username social: name: Andy Shao - https://github.com/andyshaoych # change to your github homepage - https://www.linkedin.com/in/andyshao Commit and push the code up to GitHub $ git add . $ git commit -m \"first update\" $ git push Verify the GitHub Actions workflows Verify on GitHub Pages site home Categories Tags Archives (Optional) Monetizing a Jekyll blog with Adsensehttps://ncona.com/2020/11/monetizing-a-jekyll-blog-with-adsense/" } ]
